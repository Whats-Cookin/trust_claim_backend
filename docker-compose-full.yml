services:
  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=claim
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # TODO: add to docs to get the backup ask on Slack
      # Share the backup with the container if needed to populate manually
      # To restore run `pg_restore -x --no-owner -U postgres -d claim claim.backup` inside the container
      # - ../claim.backup:/claim.backup
    restart: unless-stopped
    networks:
      - default

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4
    restart: always
    depends_on:
      - postgres
    ports:
      - 8888:80
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@example.com
      PGADMIN_DEFAULT_PASSWORD: postgres
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - default
    profiles:
      - pgadmin

  trust-claim-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trust-claim-backend
    depends_on:
      - postgres
    ports:
      - 9000:9000
    volumes:
      - ./build:/app/build
    restart: always
    env_file:
      - path: .env
        required: true
    networks:
      - default

  trust-claim-data-pipeline:
    build:
      # get this from https://github.com/Whats-Cookin/trust-claim-data-pipeline
      context: ../trust-claim-data-pipeline
      dockerfile: Dockerfile
    container_name: trust-claim-data-pipeline
    environment:
      - DB_HOST=postgres
      - DB_NAME=claim
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
    restart: always
    depends_on:
      - postgres
    ports:
      - 5000:5000
    networks:
      - default

volumes:
  postgres-data:
  pgadmin-data:

networks:
  default:
