generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String?  @unique
  passwordHash   String?
  name           String?
  authType       AuthType @default(PASSWORD)
  authProviderId String?
}

model Node {
  id        Int        @id @default(autoincrement())
  nodeUri   String
  name      String
  entType   EntityType
  descrip   String
  image     String?
  thumbnail String?
  edgesTo   Edge[]     @relation("edgeTo")
  edgesFrom Edge[]     @relation("edgeFrom")
}

model Edge {
  id          Int     @id @default(autoincrement())
  startNodeId Int
  endNodeId   Int?
  label       String
  thumbnail   String?
  claimId     Int
  claim       Claim   @relation("edgeClaim", fields: [claimId], references: [id])
  endNode     Node?   @relation("edgeTo", fields: [endNodeId], references: [id])
  startNode   Node    @relation("edgeFrom", fields: [startNodeId], references: [id])

  @@index([claimId], map: "idx_edge_claimid")
  @@index([endNodeId], map: "idx_endnodeid")
  @@index([startNodeId], map: "idx_startnodeid")
}

model Claim {
  id               Int           @id @default(autoincrement())
  subject          String
  claim            String
  object           String?
  statement        String?
  effectiveDate    DateTime?
  sourceURI        String?
  howKnown         HowKnown?
  dateObserved     DateTime?
  digestMultibase  String?
  author           String?
  curator          String?
  aspect           String?
  score            Float?
  stars            Int?
  amt              Float?
  unit             String?
  howMeasured      String?
  intendedAudience String?
  respondAt        String?
  confidence       Float?
  issuerId         String?
  issuerIdType     IssuerIdType?
  claimAddress     String?
  proof            String?
  createdAt        DateTime      @default(now())
  lastUpdatedAt    DateTime      @default(now())
  edges            Edge[]        @relation("edgeClaim")

  @@index([object(ops: raw("gin_trgm_ops"))], map: "idx_object", type: Gin)
  @@index([subject(ops: raw("gin_trgm_ops"))], map: "idx_subject", type: Gin)
}

model Credential {
  id                String    @id @default(uuid())
  context           Json?
  type              Json?
  issuer            Json?
  issuanceDate      DateTime?
  expirationDate    DateTime?
  credentialSubject Json?
  proof             Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ClaimData {
  id      Int    @id @default(autoincrement())
  claimId Int    @unique
  name    String
}

model Image {
  id              Int      @id @default(autoincrement())
  claimId         Int
  url             String
  digestMultibase String?
  metadata        Json?
  effectiveDate   DateTime
  createdDate     DateTime @default(now())
  owner           String
  signature       String
}

model CandidUserInfo {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  claimId          Int?            @unique
  firstName        String?
  lastName         String?
  candid_entity_id String
  email            String
  profileURL       String
  response         ResponseStatus?
}

model ValidationRequest {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  context           String
  validatorName     String
  validatorEmail    String
  claimId           Int
  validationClaimId Int?             @unique
  validationStatus  ValidationStatus @default(PENDING)
  response          ResponseStatus
  rating            Int?
  validationDate    DateTime?
  statement         String?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model restore_claim {
  id               Int?
  subject          String?
  claim            String?
  object           String?
  statement        String?
  effectiveDate    DateTime?
  sourceURI        String?
  howKnown         HowKnown?
  dateObserved     DateTime?
  digestMultibase  String?
  author           String?
  curator          String?
  aspect           String?
  score            Float?
  stars            Int?
  amt              Float?
  unit             String?
  howMeasured      String?
  intendedAudience String?
  respondAt        String?
  confidence       Float?
  issuerId         String?
  issuerIdType     IssuerIdType?
  claimAddress     String?
  proof            String?
  createdAt        DateTime?
  lastUpdatedAt    DateTime?

  @@ignore
}

enum AuthType {
  PASSWORD
  OAUTH
  GITHUB
}

enum EntityType {
  PERSON
  ORGANIZATION
  CLAIM
  IMPACT
  EVENT
  DOCUMENT
  PRODUCT
  PLACE
  UNKNOWN
  OTHER
}

enum ValidationStatus {
  PENDING
  COMPLETED
  REJECTED
  ABANDONED
}

enum IssuerIdType {
  DID
  ETH
  PUBKEY
  URL
}

enum ResponseStatus {
  GREEN
  YELLOW
  GREY
  RED
}

enum HowKnown {
  FIRST_HAND
  SECOND_HAND
  WEB_DOCUMENT
  VERIFIED_LOGIN
  BLOCKCHAIN
  SIGNED_DOCUMENT
  PHYSICAL_DOCUMENT
  INTEGRATION
  RESEARCH
  OPINION
  OTHER
}
