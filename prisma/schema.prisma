generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String?  @unique
  passwordHash   String?
  name           String?
  authType       AuthType @default(PASSWORD)
  authProviderId String?
}

model Node {
  id        Int        @id @default(autoincrement())
  nodeUri   String
  name      String
  entType   EntityType
  descrip   String
  image     String?
  thumbnail String?
  edgesTo   Edge[]     @relation("edgeTo")
  edgesFrom Edge[]     @relation("edgeFrom")
}

model Edge {
  id          Int     @id @default(autoincrement())
  startNodeId Int
  endNodeId   Int?
  label       String
  thumbnail   String?
  claimId     Int
  claim       Claim   @relation("edgeClaim", fields: [claimId], references: [id])
  endNode     Node?   @relation("edgeTo", fields: [endNodeId], references: [id])
  startNode   Node    @relation("edgeFrom", fields: [startNodeId], references: [id])
}

model Claim {
  id               Int           @id @default(autoincrement())
  subject          String
  claim            String
  object           String?
  statement        String?
  effectiveDate    DateTime?
  sourceURI        String?
  howKnown         HowKnown?
  dateObserved     DateTime?
  digestMultibase  String?
  author           String?
  curator          String?
  aspect           String?
  score            Float?
  stars            Int?
  amt              Float?
  unit             String?
  howMeasured      String?
  intendedAudience String?
  respondAt        String?
  confidence       Float?
  issuerId         String?
  issuerIdType     IssuerIdType?
  claimAddress     String?
  proof            String?
  createdAt        DateTime      @default(now())
  lastUpdatedAt    DateTime      @default(now())
  edges            Edge[]        @relation("edgeClaim")
}

model Credential {
  id                String    @id
  context           Json?
  type              Json?
  issuer            Json?
  issuanceDate      DateTime?
  expirationDate    DateTime?
  credentialSubject Json?
  proof             Json?
  sameAs            Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  email             String?
  canonicalUri      String?   @map("canonical_uri")
  name              String?
  credentialSchema  String?   @map("credential_schema")

  @@index([canonicalUri])
}

model UriEntity {
  id          Int        @id @default(autoincrement())
  uri         String     @unique
  entityType  EntityType @map("entity_type")
  entityTable String     @map("entity_table")
  entityId    String     @map("entity_id")
  name        String?
  image       String?
  thumbnail   String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")

  @@index([entityType])
  @@index([entityTable, entityId])
  @@map("uri_entities")
}

model Image {
  id              Int      @id @default(autoincrement())
  claimId         Int
  url             String
  digestMultibase String?
  metadata        Json?
  effectiveDate   DateTime
  createdDate     DateTime @default(now())
  owner           String
  signature       String
}

model CandidUserInfo {
  id               Int             @id @default(autoincrement())
  claimId          Int?            @unique
  firstName        String?
  lastName         String?
  candid_entity_id String
  email            String
  profileURL       String
  createdAt        DateTime        @default(now())
  response         ResponseStatus?
  updatedAt        DateTime        @updatedAt
}

model ValidationRequest {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  context           String
  validatorName     String
  validatorEmail    String
  claimId           Int
  validationClaimId Int?             @unique
  validationStatus  ValidationStatus @default(PENDING)
  response          ResponseStatus
  validationDate    DateTime?
  statement         String?
  rating            Int?
  updatedAt         DateTime         @updatedAt
}

model AuthApp {
  id           Int      @id @default(autoincrement())
  clientId     String   @unique @map("client_id")
  clientSecret String   @map("client_secret")
  provider     String
  appName      String?  @map("app_name")
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([clientId, provider])
  @@map("auth_apps")
}

enum AuthType {
  PASSWORD
  GITHUB
  OAUTH
}

enum EntityType {
  PERSON
  ORGANIZATION
  CLAIM
  IMPACT
  EVENT
  DOCUMENT
  PRODUCT
  PLACE
  UNKNOWN
  OTHER
  CREDENTIAL
}

enum ValidationStatus {
  PENDING
  COMPLETED
  REJECTED
  ABANDONED
}

enum IssuerIdType {
  DID
  ETH
  PUBKEY
  URL
}

enum ResponseStatus {
  GREEN
  YELLOW
  GREY
  RED
}

enum HowKnown {
  FIRST_HAND
  SECOND_HAND
  WEB_DOCUMENT
  VERIFIED_LOGIN
  BLOCKCHAIN
  SIGNED_DOCUMENT
  PHYSICAL_DOCUMENT
  INTEGRATION
  RESEARCH
  OPINION
  OTHER
}
