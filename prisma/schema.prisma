// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User is only for convenience, the app itself signs the claims if the user is logged in web2 methods
// The User *may* be the source, or the source may be the actual wallet issuing the claim directly to composedb
model User {
  id             Int      @id @default(autoincrement())
  email          String?  @unique
  passwordHash   String?
  name           String?
  authType       AuthType @default(PASSWORD)
  authProviderId String?
}

enum AuthType {
  PASSWORD
  GITHUB
}

enum EntityType {
  PERSON
  ORGANIZATION
  CLAIM
  IMPACT
  EVENT
  DOCUMENT
  PRODUCT
  PLACE
  UNKNOWN
  OTHER
}

// Derived models

// Nodes & Edges are used to return element graph to front end view

// Nodes are generated from subject, object, source of claims, and even claim itself may be a node
// these fields are useful for display
model Node {
  id        Int        @id @default(autoincrement())
  nodeUri   String
  name      String
  entType   EntityType
  descrip   String
  image     String? // image?
  thumbnail String? // thumbnail?
  edgesTo   Edge[]     @relation("edgeTo")
  edgesFrom Edge[]     @relation("edgeFrom")
}

// Relationship between two nodes
//   subject -> object, edge label is claim  (if claim is a relationship)
//   subject -> claim, edge label is claim   (if claim is a rating or credential)
//   claim -> source, edge is "source" (still associated with claim)

model Edge {
  id          Int     @id @default(autoincrement())
  startNode   Node    @relation("edgeFrom", fields: [startNodeId], references: [id])
  startNodeId Int
  endNode     Node?   @relation("edgeTo", fields: [endNodeId], references: [id])
  endNodeId   Int?
  label       String
  thumbnail   String?
  claim       Claim   @relation("edgeClaim", fields: [claimId], references: [id])
  claimId     Int
}

// Raw data from signed claims - generated from composedb stream of TrustClaims
model Claim {
  id            Int       @id @default(autoincrement())
  subject       String
  claim         String
  object        String?
  statement     String?
  effectiveDate DateTime?

  // splat ClaimSource
  sourceURI       String?
  howKnown        HowKnown?
  dateObserved    DateTime?
  digestMultibase String?
  author          String?
  curator         String?

  // splat NormalizedRating
  aspect String?
  score  Float? // -1 to 1
  stars  Int? // 0 to 5

  // splat Measure
  amt         Float?
  unit        String?
  howMeasured String?

  // splat Sharing
  intendedAudience String?
  respondAt        String?

  confidence Float?

  // signer of the original claim
  issuerId     String?
  issuerIdType IssuerIdType?

  // cid or other external address of signed claim
  claimAddress String?

  // embedded cryptographically signed version
  proof String?

  /////////////////  Below here nothing to do with actual claim ///////////////

  // specific to this database instance
  edges Edge[] @relation(name: "edgeClaim")

  // for the database record itself
  createdAt     DateTime @default(now())
  lastUpdatedAt DateTime @default(now())
}

// this is for validator service
model CandidUserInfo {
  id         Int    @id @default(autoincrement())
  claimId    Int?   @unique
  firstName  String
  lastName   String
  email      String
  profileURL String
}

model ValidationRequest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  constex           String
  validatorEmail    String
  claimId           Int
  validationClaimId Int // this id belongs to the claim created for the vlaidation
  validationStatus  ValidationStatus @default(PENDING)
  response          Boolean?         @default(false)
  validationDate    DateTime?
  statement         String?
}

enum ValidationStatus {
  PENDING
  COMPLETED
  REJECTED
  ABANDONED
}

enum IssuerIdType {
  DID
  ETH
  PUBKEY
  URL
}

enum HowKnown {
  FIRST_HAND
  SECOND_HAND
  WEB_DOCUMENT
  VERIFIED_LOGIN
  BLOCKCHAIN
  SIGNED_DOCUMENT
  PHYSICAL_DOCUMENT
  INTEGRATION
  RESEARCH
  OPINION
  OTHER
}
