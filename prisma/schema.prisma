// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User is only for convenience, the app itself signs the claims if the user is logged in web2 methods
// The User *may* be the source, or the source may be the actual wallet issuing the claim directly to composedb
model User {
  id             Int      @id @default(autoincrement())
  email          String?  @unique
  passwordHash   String?
  name           String?
  authType       AuthType @default(PASSWORD)
  authProviderId String?
}

enum AuthType {
  PASSWORD
  GITHUB
}

enum EntityType {
  PERSON
  ORGANIZATION
  CLAIM
  IMPACT
  EVENT
  DOCUMENT
  PRODUCT
  PLACE
  UNKNOWN
  OTHER
}

// Derived models

// Nodes & Edges are used to return element graph to front end view

// Nodes are generated from subject, object, source of claims, and even claim itself may be a node
// these fields are useful for display
model Node {
  id        Int        @id @default(autoincrement())
  nodeUri   String
  name      String
  entType   EntityType
  descrip   String
  image     String? // image?
  thumbnail String? // thumbnail?
  edgesTo   Edge[]     @relation("edgeTo")
  edgesFrom Edge[]     @relation("edgeFrom")
}

// Relationship between two nodes
//   subject -> object, edge label is claim  (if claim is a relationship)
//   subject -> claim, edge label is claim   (if claim is a rating or credential)
//   claim -> source, edge is "source" (still associated with claim)

model Edge {
  id          Int     @id @default(autoincrement())
  startNode   Node    @relation("edgeFrom", fields: [startNodeId], references: [id])
  startNodeId Int
  endNode     Node?   @relation("edgeTo", fields: [endNodeId], references: [id])
  endNodeId   Int?
  label       String
  thumbnail   String?
  claim       Claim   @relation("edgeClaim", fields: [claimId], references: [id])
  claimId     Int
}

// Raw data from signed claims - generated from composedb stream of TrustClaims
// model Claim {
//   id            Int       @id @default(autoincrement())
//   subject       String
//   claim         String
//   object        String?
//   statement     String?
//   effectiveDate DateTime?

//   // additions
//   sourceName     String
//   sourceTypeOfSubject SourceTypeOfSubject @default(OTHER)
//   otherSubjectUrls    OtherSubjectUrls[]

//   // splat ClaimSource
//   sourceURI       String?
//   howKnown        HowKnown?
//   dateObserved    DateTime?
//   digestMultibase String?
//   author          String?
//   curator         String?

//   // splat NormalizedRating
//   aspect String?
//   score  Float? // -1 to 1
//   stars  Int?   // 0 to 5

//   // splat Measure
//   amt         Float?
//   unit        String?
//   howMeasured String?

//   // splat Sharing
//   intendedAudience String?
//   respondAt        String?

//   confidence Float?

//   // signer of the original claim
//   issuerId     String?
//   issuerIdType IssuerIdType?

//   // cid or other external address of signed claim
//   claimAddress String?

//   // embedded cryptographically signed version
//   proof String?

//   /////////////////  Below here nothing to do with actual claim ///////////////

//   // specific to this database instance
//   edges Edge[] @relation(name: "edgeClaim")

//   // for the database record itself
//   createdAt     DateTime @default(now())
//   lastUpdatedAt DateTime @default(now())
// }


model Claim {
  id            Int       @id @default(autoincrement())

  createdAt     DateTime @default(now())
  lastUpdatedAt DateTime @default(now())


  sourceTypeOfSubject SourceTypeOfSubject @default(OTHER)
  subjectMainUrl       String

  //! TODO --> id or hunique handle

  // additions
  subjectName     String
  subjectPhoto   String?
  otherSubjectUrls    OtherSubjectUrls[]

  //! Maybe To let
  // signer of the original claim
  // issuerId     String?
  // issuerIdType IssuerIdType?

  // specific to this database instance
  edges Edge[] @relation(name: "edgeClaim")

  // relations now
  reports Report[]
  ratings Rating[]
  impacts Impact[]
  relatedTOs RelatedTO[]
  validations Validation[]

  //!  TODO - to understand
  // object        String?
  // splat ClaimSource
  // dateObserved    DateTime?
  // digestMultibase String?
  // author          String?
  // curator         String?


  // splat Measure
  // amt         Float?
  // unit        String?
  // howMeasured String?

  // splat Sharing
  // intendedAudience String?
  // respondAt        String?
  // // cid or other external address of signed claim
  // claimAddress String?

  // // embedded cryptographically signed version
  // proof String?

  /////////////////  Below here nothing to do with actual claim ///////////////

}


model Report {
  id        Int      @id @default(autoincrement())
  claimId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  statement    String
  howKnown  HowKnown
  confidence Float
  sourceURI  String
  effectiveDate DateTime?
  issuerId     String?
  issuerIdType IssuerIdType?


  claim     Claim    @relation(fields: [claimId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  claimId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  statement String
  confidence Float
  howKnown   HowKnown
  aspect    String
  stars     Int
  sourceURI  String
  effectiveDate DateTime?
  issuerId     String?
  issuerIdType IssuerIdType?


  claim     Claim    @relation(fields: [claimId], references: [id])
}


model Impact {
  id        Int      @id @default(autoincrement())
  claimId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  howKnown   HowKnown
  statement String
  confidence Float
  // amt        Float
  // unit       String
  value     String
  sourceURI  String
  effectiveDate DateTime?
  issuerId     String?
  issuerIdType IssuerIdType?


  claim     Claim    @relation(fields: [claimId], references: [id])
}

model RelatedTO {
  id        Int      @id @default(autoincrement())
  claimId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  howKnown   HowKnown
  statement String
  confidence Float
  sourceURI  String
  effectiveDate DateTime?
  issuerId     String?
  issuerIdType IssuerIdType?


  claim     Claim    @relation(fields: [claimId], references: [id])
}


model Validation {
  id        Int      @id @default(autoincrement())
  claimId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  howKnown   HowKnown
  statement String
  confidence Float
  sourceURI  String
  effectiveDate DateTime?
  type       String
  issuerId     String?
  issuerIdType IssuerIdType?


  claim     Claim    @relation(fields: [claimId], references: [id])
}



model OtherSubjectUrls {
  id        Int     @id @default(autoincrement())
  claimId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  url       String
  urlType   SourceTypeOfSubject

  claim     Claim   @relation(fields: [claimId], references: [id])
}



enum IssuerIdType {
  DID
  ETH
  PUBKEY
  URL
}

enum HowKnown {
  FIRST_HAND
  SECOND_HAND
  WEB_DOCUMENT
  VERIFIED_LOGIN
  BLOCKCHAIN
  SIGNED_DOCUMENT
  PHYSICAL_DOCUMENT
  INTEGRATION
  RESEARCH
  OPINION
  OTHER
}

// source of the claim subject platform
enum SourceTypeOfSubject {
  LINKEDIN
  TWITTER
  FACEBOOK
  INSTAGRAM
  TIKTOK
  YOUTUBE
  REDDIT
  MEDIUM
  GITHUB
  GITLAB
  STACKOVERFLOW
  HACKERRANK
  HACKEREARTH
  KAGGLE
  DRIBBBLE
  BEHANCE
  PINTEREST
  UPWORK
  FIVERR
  GLASSDOOR
  ANGELLIST
  CRUNCHBASE
  PRODUCTHUNT
  GOOGLE
  BING
  YAHOO
  DOCUMENT
  WEBSITE
  OTHER
}